package AutomationJourney2019.WEBSites.Tests;

import org.testng.annotations.Test;
import org.testng.internal.TestResult;
import org.testng.annotations.BeforeMethod;

import java.net.URI;
import java.net.URL;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Wait;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;

public class TestBase {
	private static WebDriver driver;
	private static TestResult result;
	private static String browserName;
	private URI[] WebSitesURL = new URI[] { URI.create("www.udemy.com")};


	@Test
	public void f() {
	}
	@BeforeMethod
	public void beforeMethod() {
	}

	@AfterMethod
	public void afterMethod() {
	}

	@AfterSuite
	public void afterSuite() {
	}
	public static WebDriver getDriver() {
		return driver;
	}
	public static void setDriver(WebDriver driver) {
		TestBase.driver = driver;
	}
	public static String getBrowserName() {
		return browserName;
	}
	public static void setBrowserName(String browserName) {
		TestBase.browserName = browserName;
	}

	public static TestResult getResult() {
		return result;
	}
	public static void setResult(TestResult result) {
		TestBase.result = result;
	}

	@SuppressWarnings("deprecation")
	public void waitForElementToBe(final String condition,final WebElement Element) {
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(2, TimeUnit.SECONDS)
				.ignoring(NoSuchElementException.class);
		switch (condition) {
		case "invisibilityOf":
			wait.until(ExpectedConditions.invisibilityOf(Element));
			break;
		case "elementToBeClickable":
			wait.until(ExpectedConditions.elementToBeClickable(Element));
			break;
		case "visibilityOf":
			wait.until(ExpectedConditions.visibilityOf(Element));
			break;
		default:
			break;
		}				
	}

	@SuppressWarnings("deprecation")
	public void waitForPageToBeWithTitle(String pageTitle) 
	{
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(2, TimeUnit.SECONDS)
				.ignoring(NoSuchElementException.class);
		wait.until(ExpectedConditions.titleContains(pageTitle));
	}
	public static void SwitchBetweenBrowserWindows(int index) {
        
	}
}
