package AutomationJourney2019.WEBSites.Tests;

import java.net.URI;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.PageLoadStrategy;
import org.openqa.selenium.Proxy;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.ie.InternetExplorerOptions;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Wait;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;
import org.testng.internal.TestResult;

public class TestBase {
	private static WebDriver driver;
	private static TestResult result;
	private static String browserName;
	private static URI[] WebSitesURL = new URI[] { URI.create("https://www.udemy.com")};
	
	@BeforeMethod
	public void beforeMethod() {
	}

	@AfterMethod
	public void afterMethod() {
	}

	@AfterSuite
	public void afterSuite() {
	}
	public static WebDriver getDriver() {
		return driver;
	}
	public static void setDriver(WebDriver driver) {
		TestBase.driver = driver;
	}
	public static String getBrowserName() {
		return browserName;
	}
	public static void setBrowserName(String browserName) {
		TestBase.browserName = browserName;
	}

	public static TestResult getResult() {
		return result;
	}
	public static void setResult(TestResult result) {
		TestBase.result = result;
	}

	@SuppressWarnings("deprecation")
	public void waitForElementToBe(final String condition,final WebElement Element) {
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(2, TimeUnit.SECONDS)
				.ignoring(NoSuchElementException.class);
		switch (condition) {
		case "invisibilityOf":
			wait.until(ExpectedConditions.invisibilityOf(Element));
			break;
		case "elementToBeClickable":
			wait.until(ExpectedConditions.elementToBeClickable(Element));
			break;
		case "visibilityOf":
			wait.until(ExpectedConditions.visibilityOf(Element));
			break;
		default:
			break;
		}				
	}

	@SuppressWarnings("deprecation")
	public void waitForPageToBeWithTitle(String pageTitle) 
	{
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(2, TimeUnit.SECONDS)
				.ignoring(NoSuchElementException.class);
		wait.until(ExpectedConditions.titleContains(pageTitle));
	}
	public static void SwitchBetweenBrowserWindows(int index) {
		Set<String> windowHandles = driver.getWindowHandles();
		if (windowHandles.size()>0) {
			driver.switchTo().window((String)windowHandles.toArray()[index]);
		}
	}

	public static JTable drawDataTable (String[] columnsNames, JTable table) {
		if (columnsNames != null && columnsNames.length>0) {
			DefaultTableModel tableModel = new DefaultTableModel();
			for(String columnName : columnsNames){
				tableModel.addColumn(columnName);
			}
			table.setModel(tableModel);			
		}
		return table;
	}
	@SuppressWarnings("deprecation")
	public String GetTodayShortDate()
	{
		Date currentDate = new Date();
		String TodayShortDate = String.valueOf(currentDate.getYear());
		if (String.valueOf(currentDate.getMonth()).length() == 1)
		{
			TodayShortDate += "0" + String.valueOf(currentDate.getMonth());
		}
		else
		{
			TodayShortDate += String.valueOf(currentDate.getMonth());
		}
		return TodayShortDate;
	}
	public static FirefoxOptions FirefoxOption()
	{
		FirefoxOptions Options = new FirefoxOptions();
		Options.setPageLoadStrategy(PageLoadStrategy.EAGER);
		Options.addPreference("browser.download.folderList", 2);
		Options.addPreference("browser.helperApps.neverAsk.saveToDisk", "application/pdf");
		Options.addPreference("browser.download.manager.showWhenStarting", false);
		Options.addPreference("pdfjs.disabled",true);
		return Options;
	}

	public static ChromeOptions ChromeOption()
    {
		Proxy proxy = new Proxy();
		proxy.setHttpProxy("212.83.146.254:54321");
		proxy.setSslProxy("212.83.146.254:54321");
//		DesiredCapabilities caps = new DesiredCapabilities().chrome();
//		caps.setCapability("proxy", proxy);
		//Proxy = "88.157.149.250:8080"; 
        ChromeOptions options = new ChromeOptions();
        options.setPageLoadStrategy(PageLoadStrategy.NORMAL);
        HashMap<String, Object> chromePrefs = new HashMap<String, Object>();
        chromePrefs.put("profile.default.content_settings.popups", 0);
		options.setExperimentalOption("prefs", chromePrefs);
		options.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);
		options.setCapability(CapabilityType.PROXY, proxy);
		return options;
    }
	
	public static EdgeOptions EDGEOptions()
    {
        EdgeOptions options = new EdgeOptions();
        //options.setPageLoadStrategy(PageLoadStrategy.NORMAL);
        //options.AddUserProfilePreference("profile.default.content_settings.popups", 0);
        //options.AddArgument("--disable-print-preview");
        return options;
    }
	public static InternetExplorerOptions IEOptions()
    {
        InternetExplorerOptions options = new InternetExplorerOptions();
        //options.PageLoadStrategy(PageLoadStrategy.NORMAL);
        //options.AddUserProfilePreference("profile.default.content_settings.popups", 0);
        //options.AddArgument("--disable-print-preview");
        return options;
    }

	@BeforeSuite
	@Parameters({"browser"})
	public static void initializeDriver(@Optional("chrome") String browserName)
    {
        if (browserName.toLowerCase().equals("chrome"))
        {
        	System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir")+"\\Sources\\chromedriver.exe");
            driver = new ChromeDriver(/*new System.Uri(Assembly.GetExecutingAssembly().CodeBase).AbsolutePath.Replace("%20", " ").TrimEnd("CSAutomatedUnitTest.DLL".ToCharArray()),*/ ChromeOption());
            //Driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(90);
            //Driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(75);
            driver.manage().timeouts().setScriptTimeout(45, TimeUnit.SECONDS);
        }
        else if (browserName.toLowerCase().equals("firefox"))
        {
        	System.setProperty("webdriver.gecko.driver", System.getProperty("user.dir") + "\\Sources\\geckodriver.exe");
            driver = new FirefoxDriver(/*new System.Uri(Assembly.GetExecutingAssembly().CodeBase).AbsolutePath.Replace("%20", " ").TrimEnd("CSAutomatedUnitTest.DLL".ToCharArray()),*/ FirefoxOption());
        }
        else if (browserName.toLowerCase().equals("ie"))
        {
        	System.setProperty("webdriver.ie.driver", System.getProperty("user.dir") + "\\Sources\\IEDriverServer.exe");
            driver = new InternetExplorerDriver(/*new System.Uri(Assembly.GetExecutingAssembly().CodeBase).AbsolutePath.Replace("%20", " ").TrimEnd("CSAutomatedUnitTest.DLL".ToCharArray()),*/ IEOptions());
        }
        else if (browserName.toLowerCase().equals("edge"))
        {
        	System.setProperty("webdriver.edge.drive", System.getProperty("user.dir") + "\\Sources\\MicrosoftWebDriver.exe");
            driver = new EdgeDriver(/*new System.Uri(Assembly.GetExecutingAssembly().CodeBase).AbsolutePath.Replace("%20", " ").TrimEnd("CSAutomatedUnitTest.DLL".ToCharArray()),*/ EDGEOptions());
        }
        else if (browserName.toLowerCase().equals("chrome-headless"))
        {
        	System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir") + "\\Sources\\chromedriver.exe");
            ChromeOptions options = new ChromeOptions();
            options.addArguments("--headless");
            options.addArguments("--window-size=1920,1080");
            driver = new ChromeDriver(options);
        }
        driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(120, TimeUnit.SECONDS);
		//driver.navigate().to(getWebSitesURL()[0].toString());
    }
	
	@AfterMethod
	public static void ScreenshotOnFailure(ITestResult result) 
	{
		if (result.getStatus() == ITestResult.FAILURE) {
			DateFormat dateFormat = new SimpleDateFormat("MMddHHmmss");
			Date date = new Date();
			Helper.captureScreenshot(driver, result.getName()+ "\\" +dateFormat.format(date));
		}
	}
	
	@AfterSuite
	public static void StopDriver() 
	{
		//driver.quit();
	}
	public static URI[] getWebSitesURL() {
		return WebSitesURL;
	}
	public static void setWebSitesURL(URI[] webSitesURL) {
		WebSitesURL = webSitesURL;
	}
}
